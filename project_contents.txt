================================
Listado de archivos (sin .git ni este .bat)
================================

================================
File: C:\Users\ASUS\Documents\GitHub\recicla_gana\Dockerfile
-------------------------------
FROM php:8.2-apache

# Instala PDO y el driver de PostgreSQL
RUN docker-php-ext-install pdo pdo_pgsql

# Habilita mod_rewrite y headers en Apache
RUN a2enmod rewrite headers

# Copia todo el contenido de public/ a la carpeta ra√≠z de Apache
COPY public/ /var/www/html/

WORKDIR /var/www/html

EXPOSE 80
CMD ["apache2-foreground"]

================================
File: C:\Users\ASUS\Documents\GitHub\recicla_gana\project_contents.txt
-------------------------------
================================
Listado de archivos (sin .git ni este .bat)
================================

================================
File: C:\Users\ASUS\Documents\GitHub\recicla_gana\Dockerfile
-------------------------------
FROM php:8.2-apache

# Instala PDO y el driver de PostgreSQL
RUN docker-php-ext-install pdo pdo_pgsql

# Habilita mod_rewrite y headers en Apache
RUN a2enmod rewrite headers

# Copia todo el contenido de public/ a la carpeta ra√≠z de Apache
COPY public/ /var/www/html/

WORKDIR /var/www/html

EXPOSE 80
CMD ["apache2-foreground"]

================================
File: C:\Users\ASUS\Documents\GitHub\recicla_gana\project_contents.txt
-------------------------------
================================
Listado de archivos (sin .git ni este .bat)
================================

================================
File: C:\Users\ASUS\Documents\GitHub\recicla_gana\Dockerfile
-------------------------------
FROM php:8.2-apache

# Instala PDO y el driver de PostgreSQL
RUN 
================================
File: C:\Users\ASUS\Documents\GitHub\recicla_gana\render.yaml
-------------------------------
services:
  - type: web
    name: recicla-gana
    env: docker
    plan: free
    region: oregon
    dockerfilePath: Dockerfile
    envVars:
      - key: DB_HOST
        fromDatabase:
          name: ecodata
          property: host
      - key: DB_PORT
        fromDatabase:
          name: ecodata
          property: port
      - key: DB_NAME
        fromDatabase:
          name: ecodata
          property: database
      - key: DB_USER
        fromDatabase:
          name: ecodata
          property: user
      - key: DB_PASS
        fromDatabase:
          name: ecodata
          property: password

================================
File: C:\Users\ASUS\Documents\GitHub\recicla_gana\schema.sql
-------------------------------
CREATE TABLE IF NOT EXISTS scores (
  name    TEXT    PRIMARY KEY,
  bottles INTEGER DEFAULT 0
);
.
================================
File: C:\Users\ASUS\Documents\GitHub\recicla_gana\public\index.html
-------------------------------
<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Ranking ‚Äì Recicla & Gana</title>
    <!-- estilos omitidos para brevedad; copia los tuyos tal cual -->
</head>

<body>
    <h1>üèÜ Ranking Recicla & Gana</h1>
    <div class="glass">
        <table id="board">
            <thead>
                <tr>
                    <th>Puesto</th>
                    <th>Participante</th>
                    <th>Botellas ‚ôªÔ∏è</th>
                    <th>Premios üéÅ</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
    <!-- tabla de recompensas igual a como la ten√≠as -->
    <script>
        const API_BASE = 'api/';
        const REWARD_TIERS = [ /* ... */ ]; // igual que antes
        const trophies = ['ü•á', 'ü•à', 'ü•â'];

        function rewardsCount(b) {
            return REWARD_TIERS.filter(t => b >= t.b).length;
        }
        async function load() {
            const res = await fetch(API_BASE + 'board.php');
            const list = await res.json();
            const tb = document.querySelector('#board tbody');
            tb.innerHTML = '';
            list.forEach((r, i) => {
                const tr = document.createElement('tr');
                const place = trophies[i] || `<span class="badge">${i+1}</span>`;
                tr.innerHTML = `
          <td class="trophy">${place}</td>
          <td>${r.name}</td>
          <td>${r.bottles}</td>
          <td>${rewardsCount(r.bottles)}</td>
        `;
                tb.appendChild(tr);
            });
        }
        load();
        setInterval(load, 15000);
        // rellena detalle de recompensas...
    </script>
</body>

</html>.
================================
File: C:\Users\ASUS\Documents\GitHub\recicla_gana\public\index_admin.html
-------------------------------
<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Recicla & Gana ‚Äì Admin</title>
    <!-- estilos igual a como los ten√≠as -->
</head>

<body>
    <h1>Recicla & Gana üöÄ</h1>
    <div class="flex">
        <div class="glass" style="flex:1 1 350px; min-width:300px;">
            <h2>Panel Admin</h2>
            <label>Nombre del participante</label>
            <input id="name" placeholder="Ej: Valentina" />
            <label>Botellas entregadas</label>
            <select id="bottles"></select>
            <button id="add">üíæ Guardar / Actualizar</button>
            <div id="msg"></div>
        </div>
        <div class="glass" style="flex:2 1 500px; min-width:300px; overflow:auto; max-height:80vh;">
            <h2>Ranking</h2>
            <table id="board">
                <thead>
                    <tr>
                        <th>Puesto</th>
                        <th>Participante</th>
                        <th>Botellas</th>
                        <th>Premios</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
            <!-- detalle de recompensas igual -->
        </div>
    </div>

    <script>
        const API_BASE = 'api/';
        const ADMIN_PASS = 'eco123';
        const REWARD_TIERS = [ /* ... */ ];
        const trophies = ['ü•á', 'ü•à', 'ü•â'];

        // llena el <select> de botellas
        const sel = document.getElementById('bottles');
        REWARD_TIERS.forEach(r => {
            const o = document.createElement('option');
            o.value = r.b;
            o.textContent = r.b;
            sel.appendChild(o);
        });

        // helper API
        async function api(u, opts = {}) {
            const r = await fetch(API_BASE + u, opts);
            if (!r.ok) throw new Error(await r.text());
            return r.json();
        }

        // carga ranking
        async function loadBoard() {
            const list = await api('board.php');
            const tb = document.querySelector('#board tbody');
            tb.innerHTML = '';
            list.forEach((row, idx) => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
          <td class="trophy">${trophies[idx]||idx+1}</td>
          <td>${row.name}</td>
          <td>${row.bottles}</td>
          <td>${REWARD_TIERS.filter(t=>row.bottles>=t.b).length}</td>
          <td><button class="del-btn" data-name="${row.name}">‚úñ</button></td>
        `;
                tb.appendChild(tr);
            });
        }
        loadBoard();

        // guardar
        document.getElementById('add').onclick = async() => {
            const name = document.getElementById('name').value.trim();
            const bottles = parseInt(sel.value, 10);
            if (!name) return alert('Ingresa nombre');
            try {
                const res = await api('deposit.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        name,
                        bottles,
                        pass: ADMIN_PASS
                    })
                });
                document.getElementById('msg').textContent = `‚úîÔ∏è ${name} ahora tiene ${res.total} botellas`;
                loadBoard();
                setTimeout(() => document.getElementById('msg').textContent = '', 4000);
                document.getElementById('name').value = '';
            } catch (e) {
                alert('Error: ' + e.message)
            }
        };

        // eliminar
        document.querySelector('#board tbody').addEventListener('click', async e => {
            if (!e.target.matches('.del-btn')) return;
            const nm = e.target.dataset.name;
            if (!confirm(`Eliminar ${nm}?`)) return;
            await api('delete.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: nm,
                    pass: ADMIN_PASS
                })
            });
            loadBoard();
        });
    </script>
</body>

</html>.
================================
File: C:\Users\ASUS\Documents\GitHub\recicla_gana\public\api\board.php
-------------------------------
<?php
ini_set('display_errors',1);
error_reporting(E_ALL);
header('Content-Type: application/json; charset=utf-8');

$host = getenv('DB_HOST');
$port = getenv('DB_PORT');
$db   = getenv('DB_NAME');
$user = getenv('DB_USER');
$pass = getenv('DB_PASS');

try {
    $pdo = new PDO(
        "pgsql:host={$host};port={$port};dbname={$db}",
        $user, $pass,
        [PDO::ATTR_ERRMODE=>PDO::ERRMODE_EXCEPTION]
    );
    $stmt = $pdo->query("SELECT name, bottles FROM scores ORDER BY bottles DESC");
    echo json_encode($stmt->fetchAll(PDO::FETCH_ASSOC));
} catch (PDOException $e) {
    http_response_code(500);
    echo json_encode(['error'=>'DB read failed: '.$e->getMessage()]);
    exit;
}
.
================================
File: C:\Users\ASUS\Documents\GitHub\recicla_gana\public\api\delete.php
-------------------------------
<?php
ini_set('display_errors',1);
error_reporting(E_ALL);
header('Content-Type: application/json; charset=utf-8');

$host = getenv('DB_HOST');
$port = getenv('DB_PORT');
$db   = getenv('DB_NAME');
$user = getenv('DB_USER');
$pass = getenv('DB_PASS');

try {
    $pdo = new PDO(
        "pgsql:host={$host};port={$port};dbname={$db}",
        $user, $pass,
        [PDO::ATTR_ERRMODE=>PDO::ERRMODE_EXCEPTION]
    );
} catch (PDOException $e) {
    http_response_code(500);
    echo json_encode(['error'=>'DB connection failed: '.$e->getMessage()]);
    exit;
}

$in = json_decode(file_get_contents('php://input'), true);
if (!is_array($in) || !isset($in['name'],$in['pass']) || $in['pass']!=='eco123') {
    http_response_code(401);
    echo json_encode(['error'=>'unauthorized']);
    exit;
}

try {
    $stmt = $pdo->prepare("DELETE FROM scores WHERE name = :name");
    $stmt->execute([':name'=>trim($in['name'])]);
    echo json_encode(['ok'=>true]);
} catch (PDOException $e) {
    http_response_code(500);
    echo json_encode(['error'=>'DB delete failed: '.$e->getMessage()]);
    exit;
}
.
================================
File: C:\Users\ASUS\Documents\GitHub\recicla_gana\public\api\deposit.php
-------------------------------
<?php
ini_set('display_errors',1);
error_reporting(E_ALL);
header('Content-Type: application/json; charset=utf-8');

$host = getenv('DB_HOST');
$port = getenv('DB_PORT');
$db   = getenv('DB_NAME');
$user = getenv('DB_USER');
$pass = getenv('DB_PASS');

try {
    $pdo = new PDO(
        "pgsql:host={$host};port={$port};dbname={$db}",
        $user, $pass,
        [PDO::ATTR_ERRMODE=>PDO::ERRMODE_EXCEPTION]
    );
} catch (PDOException $e) {
    http_response_code(500);
    echo json_encode(['error'=>'DB connection failed: '.$e->getMessage()]);
    exit;
}

$in = json_decode(file_get_contents('php://input'), true);
if (!is_array($in) || !isset($in['name'],$in['bottles'],$in['pass']) || $in['pass']!=='eco123') {
    http_response_code(401);
    echo json_encode(['error'=>'unauthorized']);
    exit;
}

$name    = trim($in['name']);
$bottles = intval($in['bottles']);

try {
    $stmt = $pdo->prepare("
      INSERT INTO scores (name, bottles)
      VALUES (:name, :bottles)
      ON CONFLICT (name) DO UPDATE
        SET bottles = scores.bottles + EXCLUDED.bottles
    ");
    $stmt->execute([':name'=>$name, ':bottles'=>$bottles]);

    $stmt = $pdo->prepare("SELECT bottles FROM scores WHERE name = :name");
    $stmt->execute([':name'=>$name]);
    $total = (int)$stmt->fetchColumn();

    echo json_encode(['total'=>$total]);
} catch (PDOException $e) {
    http_response_code(500);
    echo json_encode(['error'=>'DB write/read failed: '.$e->getMessage()]);
    exit;
}
